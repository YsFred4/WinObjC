<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    
  <PropertyGroup>
      <GitThisAssembly>true</GitThisAssembly>
      <InferLegacyPackageReferences>false</InferLegacyPackageReferences>
  </PropertyGroup>
  
  <Target Name="GetPackageVersion" Returns="$(PackageVersion)">
    <!-- TODO: read in BasePackageVersion from somewhere useful -->
    <PropertyGroup>
        <BasePackageVersion>0.0.1</BasePackageVersion>
    </PropertyGroup>
    <PropertyGroup Condition="'$(GitBranch)' != 'develop' And '$(GitBranch)' != 'master'">
      <PackageVersion>$(BasePackageVersion)-$([System.DateTime]::Now.ToString(yyyyMMddHHmmss)).pr</PackageVersion>
    </PropertyGroup>
    <PropertyGroup Condition="'$(GitBranch)' == 'develop'">
      <PackageVersion>$(BasePackageVersion)-$([System.DateTime]::Now.ToString(yyyyMMddHHmmss)).dev</PackageVersion>
    </PropertyGroup>
    <PropertyGroup Condition="'$(GitBranch)' == 'master'">
      <PackageVersion>$(BasePackageVersion)</PackageVersion>
    </PropertyGroup>
  </Target>

  <UsingTask TaskName="GetProjectUniqueName"
           TaskFactory="CodeTaskFactory"
           AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
  <ParameterGroup>
    <ProjectGuid ParameterType="System.String" Required="true"/>
    <SolutionPath ParameterType="System.String" Required="true"/>
    <ProjectUniqueName ParameterType="System.String" Output="true"/>
  </ParameterGroup>
  <Task>
    <Reference Include="System"/>
    <Reference Include="System.Reflection"/>
    <Reference Include="Microsoft.Build"/>
    <Using Namespace="Microsoft.Build.Construction"/>
    <Using Namespace="System.Reflection"/>
    <Using Namespace="System"/>
    <Code Type="Fragment" Language="cs">
      <![CDATA[
      try {
          Log.LogMessage("Getting Unique Project Name for: " + SolutionPath + " " + ProjectGuid, MessageImportance.High); 
          var solution = SolutionFile.Parse(SolutionPath);
          var project = solution.ProjectsByGuid[System.Guid.Parse(ProjectGuid).ToString("B")];
          var type = typeof(Microsoft.Build.Construction.ProjectInSolution);
          var method = project.GetType().GetMethod("GetUniqueProjectName", BindingFlags.Instance | BindingFlags.NonPublic); 
          ProjectUniqueName = (string) method.Invoke(project, new object[]{});
          Log.LogMessage("Found Unique Project Name: " + ProjectUniqueName, MessageImportance.High);  
        } catch (Exception e) {
           Log.LogErrorFromException(e);
        }
      ]]>
    </Code>
  </Task>
</UsingTask>

  <Target Name="DebugPlat" BeforeTargets="Build">
    <Warning Text="Before Build of $(MSBuildProjectFile) for the following Platform: $(Platform)" />
  </Target>

    <Target Name="AddBuiltOutput" BeforeTargets="GetPackageContents" Condition="'$(SkipGetPackageContentsForOtherPlatforms)' != 'true'">
        <ItemGroup>
            <!-- Inlcude *all* of /include/  and /include_next/ folder.  -->
            <_IncludeFiles Include="$(MSBuildThisFileDirectory)..\include\**\*.*"/>
            <_IncludeFiles Include="$(MSBuildThisFileDirectory)..\include_next\**\*.*"/>

            <!-- Inlcude *all* of /msvc/ folder. Almost certainly overkill at this stage. Things like the .sln     -->
            <!-- for ClangCompile shouldn't be shipped in the package really but ok for bootstrapping the process. -->
            <!-- Pare this down in a future version!!! -->
            <_MSVCFiles Include="$(MSBuildThisFileDirectory)..\msvc\**\*.*"/>

            <!-- Include /deps/ folder. -->
            <_DepsFiles Include="$(MSBuildThisFileDirectory)..\deps\**\*.*"/>

            <!-- Include /bin/ folder. -->
            <_BinFiles Include="$(MSBuildThisFileDirectory)..\bin\**\*.*"/>

            <PackageFile Include="@(_MSVCFiles)">
                <PackagePath>build\msvc\%(RecursiveDir)%(Filename)%(Extension)</PackagePath>
            </PackageFile>
            <PackageFile Include="@(_IncludeFiles)">
                <PackagePath>build\include\%(RecursiveDir)%(Filename)%(Extension)</PackagePath>
            </PackageFile>
            <PackageFile Include="@(_DepsFiles)">
                <PackagePath>build\deps\%(RecursiveDir)%(Filename)%(Extension)</PackagePath>
            </PackageFile>
            <PackageFile Include="@(_BinFiles)">
                <PackagePath>build\bin\%(RecursiveDir)%(Filename)%(Extension)</PackagePath>
            </PackageFile>
        </ItemGroup>

        <!-- Inlcude custom .props and .targets files. These are automatically added to a consuming project. -->
        <!-- This helps bootstrap the package and abstracts out starboard and other concepts that may change -->
        <!-- in future versions of the package. -->
        <ItemGroup>
            <PackageFile Include="$(MSBuildThisFileDirectory)WinObjC.Build.props">
                <PackagePath>build\WinObjC.Build.props</PackagePath>
            </PackageFile>
            <PackageFile Include="$(MSBuildThisFileDirectory)WinObjC.Build.targets">
                <PackagePath>build\WinObjC.Build.targets</PackagePath>
            </PackageFile>
        </ItemGroup>
    </Target>
    <Target Name="AddOtherConfigsBuiltOutput" BeforeTargets="GetPackageContents" Condition="'$(SkipGetPackageContentsForOtherPlatforms)' != 'true' AND '$(Platform)' == 'AnyCPU'">

    <ItemGroup>
      <_PackTargetPlat Include="%(ProjectConfiguration.Platform)"
              Condition="'%(ProjectConfiguration.Configuration)' == '$(Configuration)' AND '%(ProjectConfiguration.Platform)' != '$(Platform)'" />
    </ItemGroup>
    
    <GetProjectUniqueName SolutionPath="$(SolutionPath)" ProjectGuid="$(ProjectGuid)">
      <Output ItemName="_ProjectUniqueName" TaskParameter="ProjectUniqueName"/> 
    </GetProjectUniqueName>

    <Message Text="Calling Build another time on $(MSBuildProjectFile) (unique name: @(_ProjectUniqueName) ) for the following Platforms: @(_PackTargetPlat)" Importance="High"/>

    <MSBuild Projects="$(SolutionPath)"
         Targets="@(_ProjectUniqueName)"
         Properties="SkipGetPackageContentsForOtherPlatforms=true;Configuration=$(Configuration);Platform=%(_PackTargetPlat.Identity)"
         RemoveProperties="CurrentSolutionConfigurationContents"
        >
      <Output TaskParameter="TargetOutputs" ItemName="_OtherConfigPackageContent" />
    </MSBuild>

    <ItemGroup>
      <PackageFile Include="@(_OtherConfigPackageContent)" />
    </ItemGroup>

</Target>

<Import Project="WinObjC.Build.CrossTargeting.targets" Condition="'$(SkipGetPackageContentsForOtherPlatforms)' == 'true'"/>


</Project>