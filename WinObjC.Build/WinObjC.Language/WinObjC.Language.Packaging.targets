<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    
  <PropertyGroup>
      <GitThisAssembly>true</GitThisAssembly>
      <InferLegacyPackageReferences>false</InferLegacyPackageReferences>
  </PropertyGroup>

  <PropertyGroup>
    <_CoreCompileOverrideDependsOn Condition="'$(SkipGetPackageContentsForOtherPlatforms)' != 'true'">Pack</_CoreCompileOverrideDependsOn>
  </PropertyGroup>

  <Target Name="CoreCompile" DependsOnTargets="$(_CoreCompileOverrideDependsOn)" />

  <Target Name="AddBuiltOutput" BeforeTargets="GetPackageContents" Condition="'$(SkipGetPackageContentsForOtherPlatforms)' != 'true'">
      <ItemGroup>
          <!-- Inlcude *all* of /include/  and /include_next/ folder.  -->
          <_IncludeFiles Include="$(MSBuildThisFileDirectory)..\include\**\*.*"/>
          <_IncludeFiles Include="$(MSBuildThisFileDirectory)..\include_next\**\*.*"/>

          <!-- Inlcude *all* of /msvc/ folder. Almost certainly overkill at this stage. Things like the .sln     -->
          <!-- for ClangCompile shouldn't be shipped in the package really but ok for bootstrapping the process. -->
          <!-- Pare this down in a future version!!! -->
          <_MSVCFiles Include="$(MSBuildThisFileDirectory)..\msvc\**\*.*"/>

          <!-- Include /deps/ folder. -->
          <_DepsFiles Include="$(MSBuildThisFileDirectory)..\deps\**\*.*"/>

          <!-- Include /bin/ folder. -->
          <_BinFiles Include="$(MSBuildThisFileDirectory)..\bin\**\*.*"/>

          <PackageFile Include="@(_MSVCFiles)">
              <PackagePath>build\msvc\%(RecursiveDir)%(Filename)%(Extension)</PackagePath>
          </PackageFile>
          <PackageFile Include="@(_IncludeFiles)">
              <PackagePath>build\include\%(RecursiveDir)%(Filename)%(Extension)</PackagePath>
          </PackageFile>
          <PackageFile Include="@(_DepsFiles)">
              <PackagePath>build\deps\%(RecursiveDir)%(Filename)%(Extension)</PackagePath>
          </PackageFile>
          <PackageFile Include="@(_BinFiles)">
              <PackagePath>build\bin\%(RecursiveDir)%(Filename)%(Extension)</PackagePath>
          </PackageFile>
      </ItemGroup>

      <!-- Inlcude custom .props and .targets files. These are automatically added to a consuming project. -->
      <!-- This helps bootstrap the package and abstracts out starboard and other concepts that may change -->
      <!-- in future versions of the package. -->
      <ItemGroup>
          <PackageFile Include="$(MSBuildThisFileDirectory)$(PackageId).props" Condition="Exists('$(MSBuildThisFileDirectory)$(PackageId).props')">
              <PackagePath>build\$(PackageId).props</PackagePath>
          </PackageFile>
          <PackageFile Include="$(MSBuildThisFileDirectory)$(PackageId).targets" Condition="Exists('$(MSBuildThisFileDirectory)$(PackageId).targets')">
              <PackagePath>build\$(PackageId).targets</PackagePath>
          </PackageFile>
      </ItemGroup>
  </Target>

    <Target Name="AddSingleConfigBuildOutput"  Returns="@(_PackageContentsForPlat)"> 
      <MSBuild Projects="$(SolutionPath)"
         Targets="GetSolutionConfigurationContents"
         Properties="Configuration=$(Configuration);Platform=$(Platform)">
        <Output TaskParameter="TargetOutputs" ItemName="_SolutionConfigurationContents" />
      </MSBuild>

      <Message Text="AddSingleConfigBuildOutput Platform: $(Platform)" Importance="High"/>

      <MSBuild Projects="$(MSBuildProjectFile)"
         Targets="GetPackageContents"
         Properties="SkipGetPackageContentsForOtherPlatforms=true;BuildingInsideVisualStudio=false;BuildProjectReferences=true;IsPackable=false;Configuration=$(Configuration);Platform=$(Platform);CurrentSolutionConfigurationContents=%(_SolutionConfigurationContents.Identity);GetPackageContentsDependsOn=Build;$(GetPackageContentsDependsOn)">
        <Output TaskParameter="TargetOutputs" ItemName="_PackageContentsForPlat" />
      </MSBuild>
    </Target>

  <Target Name="AddOtherConfigsBuiltOutput" BeforeTargets="GetPackageContents" Condition="'$(SkipGetPackageContentsForOtherPlatforms)' != 'true' AND '$(Platform)' == 'AnyCPU'">

    <ItemGroup>
      <_PackTargetPlat Include="%(ProjectConfiguration.Platform)"
              Condition="'%(ProjectConfiguration.Configuration)' == '$(Configuration)' AND '%(ProjectConfiguration.Platform)' != '$(Platform)'" />
    </ItemGroup>
    
    <MSBuild Projects="$(MSBuildProjectFile)"
         Targets="AddSingleConfigBuildOutput"
         Properties="Platform=%(_PackTargetPlat.Identity)">
      <Output TaskParameter="TargetOutputs" ItemName="_OtherPackageContents" />
    </MSBuild>

    <ItemGroup>
      <PackageFile Include="@(_OtherPackageContents)" />
    </ItemGroup>

  </Target>

  <Target Name="SetPackageVersion" BeforeTargets="GetPackageVersion" DependsOnTargets="$(GetPackageVersionDependsOn)" Returns="$(PackageVersion)">
    <!-- TODO: read in BasePackageVersion from somewhere useful -->
    <PropertyGroup>
      <BasePackageVersion>0.0.1</BasePackageVersion>
      <PackageVersion Condition="'$(GitBranch)' == 'master'">$(BasePackageVersion)</PackageVersion>
      <PackageVersion Condition="'$(GitBranch)' == 'develop'">$(BasePackageVersion)-$([System.DateTime]::Now.ToString(yyyyMMddHHmmss)).dev</PackageVersion>
      <PackageVersion Condition="'$(PackageVersion)' == ''">$(BasePackageVersion)-$([System.DateTime]::Now.ToString(yyyyMMddHHmmss)).pr</PackageVersion>
    </PropertyGroup>
  </Target>

</Project>