<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
      <GitThisAssembly>true</GitThisAssembly>
      <InferLegacyPackageReferences>false</InferLegacyPackageReferences>
  </PropertyGroup>
    
  <PropertyGroup>
      <PackageId>WinObjC.Logging</PackageId>
      <Title>WinObjC.Logging</Title>
      <Authors>Microsoft</Authors>
      <Owners>Microsoft</Owners>
      <Summary>WinObjC.Logging</Summary>
      <Description>WinObjC.Logging</Description>
      <PackageReleaseNotes>
      </PackageReleaseNotes>
      <PackageProjectUrl>
      </PackageProjectUrl>
      <PackageLicenseUrl>
      </PackageLicenseUrl>
      <Copyright>Copyright Â© Microsoft</Copyright>
      <PackageTags>WinObjC.Logging</PackageTags>
      <IsDevelopmentDependency>true</IsDevelopmentDependency>
      <IncludeSymbolsInPackage>false</IncludeSymbolsInPackage>
      <IncludeFrameworkReferencesInPackage>false</IncludeFrameworkReferencesInPackage>
      <NoPackageAnalysis>true</NoPackageAnalysis>
  </PropertyGroup>

  <PropertyGroup>
    <GetPackageVersionDependsOn>SetPackageVersion;$(GetPackageVersionDependsOn);</GetPackageVersionDependsOn>
  </PropertyGroup>
  <Target Name="SetPackageVersion" DependsOnTargets="$(GitVersionDependsOn)" >

    <Error Text="Cannot determine git branch. Please make sure GitInfo is listed in the project.json for this project and that git.exe is part of the PATH environment variable." Condition="'$(GitBranch)' == ''"/>

    <PropertyGroup>
      <PackageVersion Condition="'$(GitBranch)' == 'master'">$(GitBaseVersionMajor).$(GitBaseVersionMinor).$([System.DateTime]::Now.ToString(yyyyMMdd))</PackageVersion>
    </PropertyGroup>

    <PropertyGroup Condition= "'$(ProjectExt)' != '.vcxproj'">
      <PackageVersion Condition="'$(GitBranch)' == 'develop'">$(GitBaseVersionMajor).$(GitBaseVersionMinor).$([MSBuild]::Add('$(GitBaseVersionPatch)', '1'))-$([System.DateTime]::Now.ToString(yyyyMMddHHmmss)).dev</PackageVersion>
      <PackageVersion Condition="'$(PackageVersion)' == ''">$(GitBaseVersionMajor).$(GitBaseVersionMinor).$([MSBuild]::Add('$(GitBaseVersionPatch)', '1'))-$([System.DateTime]::Now.ToString(yyyyMMddHHmmss)).pr</PackageVersion>
    </PropertyGroup>

    <!-- Lie about the version string when looking at a project reference to a .vcxproj. Really we want the "latest" here to pickup the just built bits
         Which is why the current time is used above but in a .vcxproj project reference that time may be different (newer) than the one used to package it
        for real. Instead claim its MAJOR.MINOR.PATCH - - which is what is produced when a project.json has a Version-* in it. -->
    <PropertyGroup Condition= "'$(ProjectExt)' == '.vcxproj'">
      <PackageVersion Condition="'$(PackageVersion)' == ''">$(GitBaseVersionMajor).$(GitBaseVersionMinor).$([MSBuild]::Add('$(GitBaseVersionPatch)', '1'))--</PackageVersion>
    </PropertyGroup>
  </Target>

</Project>